from dataclasses import dataclass
from pathlib import Path

methods = {
    "DELETE": "\033[91m DELETE \033[0m",
    "GET": "\033[92m GET \033[0m",
    "HEAD": "\033[92m HEAD \033[0m",
    "OPTIONS": "\033[93m OPTIONS \033[0m",
    "PATCH": "\033[94m PATCH \033[0m",
    "POST": "\033[94m POST \033[0m",
    "PUT": "\033[93m PUT \033[0m"
}

@dataclass
class Tags:
    users = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏üë•'
    products = '–¢–æ–≤–∞—Ä—ã'
    favorites = '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ‚ù§Ô∏è'
    orders = '–ó–∞–∫–∞–∑—ã'
    elastic_products = '–¢–æ–≤–∞—Ä—ã *Elasticüîé*'
    celery_bg = 'Celery –§–æ–Ωü•¨üêá'
    chat = '–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Äüí¨'
    file_reader = '–§–∞–π–ª–æ–≤–æ–µ –•—Ä–∞–Ω–∏–ª–∏—â–µüóÇ'

@dataclass
class Events:
    registr_user = '–Æ–∑–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è'
    unluck_registr_user = '–Æ–∑–µ—Ä –Ω–µ —Å–º–æ–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'
    unluck_login_user = '–Æ–∑–µ—Ä –Ω–µ —Å–º–æ–≥ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç'

    white_list_url = '–ü—Ä–æ–π–¥–µ–Ω–æ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
    long_response = '–î–æ–ª–≥–∏–π –æ—Ç–≤–µ—Ç'
    lim_requests_ip = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"

    new_aT = "–í—ã–ø—É—â–µ–Ω –∞–∫—Å–µ—Å_—Ç–æ–∫–µ–Ω"
    fake_aT_try = "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–º–µ–Ω—ã –∞–∫—Å–µ—Å_—Ç–æ–∫–µ–Ω–∞"
    fake_wT_try = "–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–º–µ–Ω—ã ws_—Ç–æ–∫–µ–Ω–∞ | WebSocket Auth | "
    fake_rT = '–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–º–µ–Ω—ã —Ä–µ—Ñ—Ä–µ—à_—Ç–æ–∫–µ–Ω–∞'
    fake_wT = '–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–º–µ–Ω—ã ws_—Ç–æ–∫–µ–Ω–∞'
    fake_rT_or_exp = '–í–æ–∑–º–æ–∂–Ω–∞ –ø–æ–¥–º–µ–Ω–∞ —Ä–µ—Ñ—Ä–µ—à_—Ç–æ–∫–µ–Ω–∞/–∏—Å—Ç—ë–∫ –ø—Ä–æ—Å—Ç–æ'

    bg_product_stage_ = "–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞, —Å—Ç–µ–ø–µ–Ω—å —Ñ–æ–Ω–∞: {} | "
    bg_queue_enter = "–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞, —Å—Ç–µ–ø–µ–Ω—å —Ñ–æ–Ω–∞: {} | –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å | "
    bg_call_func =  "–ö–∞—Ä—Ç–æ—á–∫–∞ —Ç–æ–≤–∞—Ä–∞, —Å—Ç–µ–ø–µ–Ω—å —Ñ–æ–Ω–∞: {} | –í—ã–∑–æ–≤ –∏–∑-–ø–æ–¥ –æ–±—ë—Ä—Ç–∫–∏ | "

    bg_send_mail = "–û—Ç–ø—Ä–∞–≤–∫–∞ –ü–∏—Å—å–º–∞ | "

    periodic_cron = '–ö—Ä–æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞ | '
    cron_completed = '–†–µ–≥—É–ª—è—Ä–Ω–∞—è —Ç–∞—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ | '

    TEST = "–õ–æ–≥–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!"
    plug = ''

@dataclass
class WSControl:
    open: str = 'view_chat'
    close: str = 'close_chat'
    ws_chat_channel: str = 'chat'
    send_msg: str = 'send_msg'
    last_messages: str = 'last_messages_layout'
    get_file: str = 'get_file'
    save_file: str = 'save_file'
    set_readed: str = 'set_readed'
    commit_msg: str = 'commit_msg'


@dataclass
class TokenTypes:
    access_token: str = 'aT'
    refresh_token: str = 'rT'
    ws_token: str = 'wT'

token_types = {
    'access_token': 'aT',
    'refresh_token': 'rT',
    'ws_token': 'wT'
}

mail_ptn_forget_password_HTML='''
<!DOCTYPE html>
    <html lang="ru">
    <head><meta charset="UTF-8" /></head>
    <body>
      <h2>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {}!</h2>
      <p>–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –Ω–∞ <em>Pied Market</em>.</p>
      <p>–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</p>
      <h1 style="color:#2c3e50;">{}</h1>
      <p>–ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç.</p>
      <p>–ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –ø–∏—Å—å–º–æ.</p>
      <hr>
      <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ <strong>Pied Market</strong></p>
    </body>
    </html>
'''

mail_ptn_forget_password_TEXT = '''
–¢–µ–º–∞: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –Ω–∞ Pied Market

–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {}!

–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –Ω–∞ Pied Market. –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:

üîê {}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.

–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –í—ã, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,  
–ö–æ–º–∞–Ω–¥–∞ Pied Market
'''

def hide_log_param(param, start=3, end=8):
    return param[:start] + '*' * len(param[start:-end-1]) + param[-end:]

def cut_log_param(param, compression_times=20):
    return param[len(param)//compression_times:] + '...'

def create_log_dirs():
    LOG_DIR = Path('logs')
    LOG_DIR.mkdir(exist_ok=True)
    (LOG_DIR / 'info_warning_error').mkdir(exist_ok=True, parents=True)
    (LOG_DIR / 'critical').mkdir(exist_ok=True, parents=True)

def create_debug_log_dir():
    LOG_DIR = Path('logs')
    LOG_DIR.mkdir(exist_ok=True)
    (LOG_DIR / 'debug').mkdir(exist_ok=True, parents=True)


copy_query_PRODUCTS_BY_ID = '''
SELECT p.id, p.seller_id, p.prd_name, p.cost, p.remain, img.path, d_p.delivery_days, COUNT(c.id) AS count_coms, ROUND(AVG(c.rate), 1) AS avg_rate FROM products p
LEFT JOIN comments c ON c.prd_id = p.id
JOIN images_prdts img ON img.prd_id = p.id AND img.title_img = true
JOIN details_prdts d_p ON d_p.prd_id = p.id 
WHERE p.id IN ({})
AND p.remain > 0
GROUP BY p.id, p.seller_id, p.prd_name, p.cost, p.remain, img.path, d_p.delivery_days
'''

